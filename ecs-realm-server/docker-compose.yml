# [SEQUENCE: MVP6-5] Production-ready multi-server deployment
version: '3.8'

services:
  # [SEQUENCE: MVP6-11] Game server for zone 1
  game-server-zone1:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mmorpg-server-zone1
    command: ["--config", "/app/config/server.yaml", "--zone", "1"]
    environment:
      - SERVER_NAME=Zone1
      - WORLD_ZONE_ID=1
      - SERVER_PORT=8080
      - METRICS_PORT=9090
      - HEALTH_PORT=8081
      - MAX_PLAYERS=1000
      - REDIS_URL=redis://redis:6379/0
      - DB_HOST=postgres
      - DB_NAME=gamedb
      - DB_USER=gameserver
      - DB_PASSWORD=${DB_PASSWORD:-gamepass123}
      - RABBITMQ_URL=amqp://game:game123@rabbitmq:5672/
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_METRICS=true
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ./logs/zone1:/app/logs
      - ./config:/app/config:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # [SEQUENCE: MVP6-12] PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: mmorpg-postgres
    environment:
      POSTGRES_DB: gamedb
      POSTGRES_USER: gameserver
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gamepass123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./sql/tables.sql:/docker-entrypoint-initdb.d/02-tables.sql:ro
    networks:
      - game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameserver -d gamedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: mmorpg-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: mmorpg-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: game
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-game123}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # [SEQUENCE: MVP6-13] Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: mmorpg-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - game-server-zone1
    networks:
      - game-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: mmorpg-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9000:9090"
    networks:
      - game-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mmorpg-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - game-network
    restart: unless-stopped

networks:
  game-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
